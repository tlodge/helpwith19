{"version":3,"sources":["features/home/components/Home.js","Eligibility.js","HowItWorks.js","App.js","serviceWorker.js","index.js","reducer.js","store/configureStore.production.js","features/home/home.js","store/configureStore.js","banner.svg"],"names":["connect","selector","dispatch","actions","bindActionCreators","homeActions","horizontal","style","marginTop","lineHeight","to","Eligibility","href","HowItWorks","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","collection","add","first","last","born","then","docRef","console","log","id","catch","error","store","configureStore","App","className","Group","align","Alignment","LEFT","Heading","Divider","src","banner","path","About","Users","intent","Intent","PRIMARY","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message","combineReducers","routing","homeName","home","enhancer","compose","applyMiddleware","promiseMiddleware","thunk","createStore","initialState","rootReducer","INIT","NAME","reducer","state","action","type","createStructuredSelector","actionCreators","init","module","exports","require","default"],"mappings":"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","file":"static/js/main.8077cc3c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {connect} from 'react-redux';\nimport { actionCreators as homeActions, selector } from '../';\nimport { bindActionCreators } from 'redux';\nimport { Divider } from \"@blueprintjs/core\";\n\nimport {\n    Link\n} from \"react-router-dom\";\n\nfunction Home() {\n    return <>\n        <h3>Design and Development support for Nottingham businesses and charities</h3>\n        <Divider horizontal=\"true\"/>\n        <div style={{marginTop:10, lineHeight:1.7}}>\n            <p>We are a group of IT professionals; <strong>designers, web and app developers and IT professionals </strong>who want to do our bit to support the Nottingham business and charity sector during the Covid-19 Pandemic. </p> \n            \n            <p> We expect that there are many great small businesses that urgently need to get trading online.  This is a great opportunity for innovation, and we hope that we can help.  If you are a small business, you may be grappling with any number of new technical challenges; whether getting your stock online, creating shopping carts and payment gateways, supporting order fulfilment, or simply getting advice on what may or may not be possible.  Take a look at the <Link to=\"/eligibility\">eligible businesses</Link> to find out whether you meet the government criteria for essential businesses</p>\n\n            <p>We are only finding our way at the moment, trying to understand the limits of what we might achieve.  We need as many local IT professionals and developers as possible to get in touch to help with this initiative.  For a full list of skills that we're looking for, please check out the volunteering section.</p>\n        </div>\n       \n    </>\n}\n\nexport default connect(selector, (dispatch) => ({\n    actions: bindActionCreators(homeActions, dispatch)\n}))(Home);","import React from 'react';\n\nexport default function Eligibility() {\n    return <div>\n        eligible businesses\n        For now, the government is encouraging online retail.  There is a list of businesses and premises that must stay closed, which can be found <a href=\"https://www.gov.uk/government/publications/further-businesses-and-premises-to-close/further-businesses-and-premises-to-close-guidance#businesses-and-premises-that-must-remain-closed\">here</a>.  To be eligible for consideration you must not be a business that has been asked to cease trading, and we ask that you are Nottingham-based, independent and (with appropriate technology) able to provide products whilst preserving the social distancing measures necessary to stop the spread of the virus.\n        </div>\n}","import React from 'react';\n\nexport default function HowItWorks() {\n    return <div>\n        how does it work?\n\n        Get in contact with us - send an email to tlodge@gmail.com.  We will then get in contact with you, and work out what it is you need in order to get trading online.  Once we have an idea of what needs to be done technically, we will write it up as a project specification and distribute amongst our volunteer designers and developers. \n        </div>\n}","import React from 'react';\nimport { Provider } from 'react-redux';\n\nimport { Button, Intent, Spinner, Navbar, Alignment } from \"@blueprintjs/core\";\n // using node-style package resolution in a CSS file: \nimport Home from \"./features/home/components\";\nimport Eligibility from \"./Eligibility\";\nimport HowItWorks from \"./HowItWorks\";\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\nimport \"@blueprintjs/icons/lib/css/blueprint-icons.css\";\nimport './App.css';\nimport configureStore from './store/configureStore';\nimport banner from './banner.svg';\n// using JSX:\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nimport * as firebase from 'firebase';\n\nvar firebaseConfig = {\n  apiKey: \"AIzaSyBLhNTd-wUUSCtmxfipDoP9AWwbbVoosNs\",\n  authDomain: \"helpwith19.firebaseapp.com\",\n  databaseURL: \"https://helpwith19.firebaseio.com\",\n  projectId: \"helpwith19\",\n  storageBucket: \"helpwith19.appspot.com\",\n  messagingSenderId: \"664811162099\",\n  appId: \"1:664811162099:web:e8843991ecde7bb333aa86\"\n};\n\nfirebase.initializeApp(firebaseConfig);\nvar db = firebase.firestore();\ndb.collection(\"users\").add({\n  first: \"Ada\",\n  last: \"Lovelace\",\n  born: 1815\n})\n.then(function(docRef) {\n  console.log(\"Document written with ID: \", docRef.id);\n})\n.catch(function(error) {\n  console.error(\"Error adding document: \", error);\n});\n//const databaseRef = firebase.database().ref();\n//const todosRef = databaseRef.child(\"helpwith19\")\n//todosRef.push().set({hello:\"world\"});\nconst store = configureStore();\n//const history = syncHistoryWithStore(browserHistory, store);\n\nexport default function App() {\n  return (\n    <Provider store={store}>\n      <Router>\n\n        <Navbar className=\"bp3-dark\">\n          <Navbar.Group align={Alignment.LEFT}>\n            <Navbar.Heading>Help with Covid-19</Navbar.Heading>\n            <Navbar.Divider />\n\n          <button className=\"bp3-button bp3-minimal\"> <Link to=\"/\">home</Link> </button>\n          <button className=\"bp3-button bp3-minimal\"><Link to=\"/eligibility\">eligibility</Link></button>\n          <button className=\"bp3-button bp3-minimal\"><Link to=\"/about\">volunteer!</Link></button>\n          <button className=\"bp3-button bp3-minimal\"><Link to=\"/howitworks\">how it works</Link></button>\n          <button className=\"bp3-button bp3-minimal\"><Link to=\"/resources\">resources</Link></button>\n          </Navbar.Group>\n        </Navbar>\n        <img className=\"banner\" src={banner}></img>\n        <div className=\"content\">\n\n          {/* A <Switch> looks through its children <Route>s and\n              renders the first one that matches the current URL. */}\n          <Switch>\n          <Route path=\"/eligibility\">\n              <Eligibility/>\n            </Route>\n            <Route path=\"/about\">\n              <About />\n            </Route>\n            <Route path=\"/users\">\n              <Users />\n            </Route>\n            <Route path=\"/howitworks\">\n              <HowItWorks />\n            </Route>\n            <Route path=\"/\">\n              <Home />\n            </Route>\n          </Switch>\n         \n          </div>\n          <div className=\"footer\"></div>\n      </Router>\n    </Provider>\n  );\n}\n\n\n\nfunction About() {\n  return <h2>About</h2>;\n}\n\nfunction Users() {\n  return <>\n    <h2>Users</h2>;\n    <Spinner intent={Intent.PRIMARY} />\n  </>\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { combineReducers } from 'redux';\nimport { routerReducer as routing } from 'react-router-redux';\n\n\nimport home, { NAME as homeName } from './features/home';\n\nexport default combineReducers({\n  routing,\n  [homeName]: home,\n});\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport promiseMiddleware from 'redux-promise';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducer';\n\nconst enhancer = compose(\n  applyMiddleware(...[promiseMiddleware,thunk])\n)(createStore);\n\nexport default function configureStore(initialState) {\n  return enhancer(rootReducer, initialState);\n}\n","import { createStructuredSelector } from 'reselect';\n\n// Action Types\nconst INIT = 'helpwith19/home/INIT';\n\nexport const NAME = 'home';\n\nconst initialState = {\n   home: \"\"\n};\n\nexport default function reducer(state = initialState, action ={}) {\n   \n  switch (action.type) {\n    \n    case INIT:\n        return {\n            ...state\n        }\n\n    default:\n      return state;\n  }\n}\n\n// Action Creators\nfunction init(){\n    return {\n        type: INIT\n    }\n}\n\nconst home = (state) => state[NAME].home;\n\n\nexport const selector = createStructuredSelector({\n    home\n});\n\nexport const actionCreators = {\n    init\n};","if (process.env.NODE_ENV === 'production') {\n    module.exports = require('./configureStore.production').default;\n  }\n  else {\n    module.exports = require('./configureStore.development').default;\n  }\n  ","module.exports = __webpack_public_path__ + \"static/media/banner.000d8e9f.svg\";"],"sourceRoot":""}